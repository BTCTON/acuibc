package com.acuilab.bc.main.ui;

import com.google.common.io.Files;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.BrowserContext;
import com.teamdev.jxbrowser.chromium.BrowserContextParams;
import com.teamdev.jxbrowser.chromium.BrowserType;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.io.IOException;
import java.util.logging.Logger;
import org.apache.commons.io.IOUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.acuilab.bc.main.ui//ChangeLog//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ChangeLogTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.acuilab.bc.main.ui.ChangeLogTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ChangeLogAction",
        preferredID = "ChangeLogTopComponent"
)
@Messages({
    "CTL_ChangeLogAction=更新记录",
    "CTL_ChangeLogTopComponent=更新记录",
    "HINT_ChangeLogTopComponent=更新记录"
})
public final class ChangeLogTopComponent extends TopComponent {
    private static final Logger LOG = Logger.getLogger(ChangeLogTopComponent.class.getName());
    private final Browser browser;
    private final BrowserView view;

    public ChangeLogTopComponent() {
        initComponents();
        setName(Bundle.CTL_ChangeLogTopComponent());
        setToolTipText(Bundle.HINT_ChangeLogTopComponent());

	// http://acuilab.com:8080/articles/2021/02/09/1612840191556.html
	// 解决JxBrowser中BrowserView控件覆盖其他控件的办法 
	browser = new Browser(BrowserType.LIGHTWEIGHT, new BrowserContext(new BrowserContextParams(Files.createTempDir().getAbsolutePath())));
	view = new BrowserView(browser);
	this.add(view, BorderLayout.CENTER);
	
        try {
            String html = IOUtils.toString(ChangeLogTopComponent.class.getResourceAsStream("/resource/changelog/CHANGELOG.html"), "UTF-8");
            browser.loadHTML(html);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
