package com.acuilab.bc.main.wallet.wizard;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import javax.swing.JPanel;
import org.jdesktop.swingx.JXTextArea;
import org.openide.util.Exceptions;

public final class MnemonicInputPanel extends JPanel {

    /**
     * Creates new form ImportVisualPanel1
     */
    public MnemonicInputPanel() {
        initComponents();
        
        buttonGroup1.add(mnemonicRadio);
        buttonGroup1.add(privateKeyRadio);
        mnemonicLbl.setText("请输入您的助记词");
        mnemonicArea.setPrompt("请依次填写助记词，以空格隔开");
    }

    @Override
    public String getName() {
        return "导入钱包";
    }
    
    public JXTextArea getMnemonicArea() {
        return mnemonicArea;
    }
    
    public String getImportType() {
        if(mnemonicRadio.isSelected()) {
            return mnemonicRadio.getText();
        } else {
            return privateKeyRadio.getText();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        mnemonicArea = new org.jdesktop.swingx.JXTextArea();
        pasteBtn = new org.jdesktop.swingx.JXButton();
        mnemonicLbl = new org.jdesktop.swingx.JXLabel();
        mnemonicRadio = new javax.swing.JRadioButton();
        privateKeyRadio = new javax.swing.JRadioButton();

        setMinimumSize(new java.awt.Dimension(760, 540));
        setPreferredSize(new java.awt.Dimension(760, 540));

        mnemonicArea.setColumns(20);
        mnemonicArea.setLineWrap(true);
        mnemonicArea.setRows(5);
        mnemonicArea.setWrapStyleWord(true);
        mnemonicArea.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jScrollPane1.setViewportView(mnemonicArea);

        org.openide.awt.Mnemonics.setLocalizedText(pasteBtn, org.openide.util.NbBundle.getMessage(MnemonicInputPanel.class, "MnemonicInputPanel.pasteBtn.text")); // NOI18N
        pasteBtn.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        pasteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mnemonicLbl, org.openide.util.NbBundle.getMessage(MnemonicInputPanel.class, "MnemonicInputPanel.mnemonicLbl.text")); // NOI18N
        mnemonicLbl.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N

        mnemonicRadio.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        mnemonicRadio.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(mnemonicRadio, org.openide.util.NbBundle.getMessage(MnemonicInputPanel.class, "MnemonicInputPanel.mnemonicRadio.text")); // NOI18N

        privateKeyRadio.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(privateKeyRadio, org.openide.util.NbBundle.getMessage(MnemonicInputPanel.class, "MnemonicInputPanel.privateKeyRadio.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mnemonicRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(privateKeyRadio)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pasteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mnemonicLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mnemonicRadio)
                    .addComponent(privateKeyRadio))
                .addGap(8, 8, 8)
                .addComponent(mnemonicLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pasteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pasteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteBtnActionPerformed
        // 获取系统剪贴板
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

        // 获取剪贴板中的内容
        Transferable trans = clipboard.getContents(null);

        if (trans != null) {
            // 判断剪贴板中的内容是否支持文本
            if (trans.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                    // 获取剪贴板中的文本内容
                try {
                    String text = (String) trans.getTransferData(DataFlavor.stringFlavor);
                    mnemonicArea.setText(text);
                } catch (UnsupportedFlavorException | IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }//GEN-LAST:event_pasteBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTextArea mnemonicArea;
    private org.jdesktop.swingx.JXLabel mnemonicLbl;
    private javax.swing.JRadioButton mnemonicRadio;
    private org.jdesktop.swingx.JXButton pasteBtn;
    private javax.swing.JRadioButton privateKeyRadio;
    // End of variables declaration//GEN-END:variables
}
